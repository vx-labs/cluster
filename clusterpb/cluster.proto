syntax = "proto3";

package cluster;
option go_package = "clusterpb";

import "go.etcd.io/etcd/raft/raftpb/raft.proto";

message Payload { bytes Data = 1; }

message RaftContext {
  uint64 ID = 1;
  string Address = 2;
  repeated string Clusters = 3;
}

message JoinClusterResponse { uint64 Commit = 1; }

message PeerResponse { bool status = 1; }

message GetMembersRequest { string ClusterID = 1; }
message Member {
  uint64 ID = 1;
  string Address = 2;
  bool IsLeader = 3;
  bool IsAlive = 4;
}
message GetMembersResponse {
  repeated Member Members = 1;
  uint64 CommittedIndex = 2;
}
message GetStatusRequest { string ClusterID = 1; };
message GetStatusResponse {
  bool IsLeader = 1;
  bool HasBeenBootstrapped = 2;
  bool IsInCluster = 3;
};

message RemoveMemberRequest { uint64 ID = 1; bool Force = 2; }
message RemoveMemberResponse {}
message PromoteMemberResponse {}

message TopologyMemberStatus {
  uint64 ID = 1;
  string Address = 2;
  bool IsLeader = 3;
  bool IsAlive = 4;
  uint64 Applied = 5;
  bool IsVoter = 6;
};
message GetTopologyRequest { string ClusterID = 1; }
message GetTopologyResponse {
  string ClusterID = 1;
  uint64 Committed = 2;
  repeated TopologyMemberStatus Members = 3;
}
message ProcessMessageRequest {
  string ClusterID = 1;
  raftpb.Message Message = 2;
}

message JoinClusterRequest {
  string ClusterID = 1;
  RaftContext Context = 2;
}
message PromoteMemberRequest {
  string ClusterID = 1;
  RaftContext Context = 2;
}

message RemoveMultiRaftMemberRequest {
  string ClusterID = 1;
  uint64 ID = 2;
  bool Force = 3;
}
message RemoveMultiRaftMemberResponse {}

service MultiRaft {
  rpc ProcessMessage(ProcessMessageRequest) returns (Payload) {}
  rpc JoinCluster(JoinClusterRequest) returns (JoinClusterResponse) {}
  rpc PromoteMember(PromoteMemberRequest) returns (PromoteMemberResponse) {}
  rpc GetMembers(GetMembersRequest) returns (GetMembersResponse) {}
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {}
  rpc RemoveMember(RemoveMultiRaftMemberRequest)
      returns (RemoveMultiRaftMemberResponse) {}
  rpc GetTopology(GetTopologyRequest) returns (GetTopologyResponse) {}
}

service Node {}